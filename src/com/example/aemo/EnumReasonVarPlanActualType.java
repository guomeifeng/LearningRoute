//
// This file was generated by the Eclipse Implementation of JAXB, v2.3.3 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.05.08 at 12:34:41 PM AEST 
//


package com.example.aemo;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * &lt;p&gt;Java class for EnumReasonVarPlanActualType.
 * 
 * &lt;p&gt;The following schema fragment specifies the expected content contained within this class.
 * &lt;pre&gt;
 * &amp;lt;simpleType name="EnumReasonVarPlanActualType"&amp;gt;
 *   &amp;lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&amp;gt;
 *     &amp;lt;maxLength value="30"/&amp;gt;
 *     &amp;lt;whiteSpace value="collapse"/&amp;gt;
 *     &amp;lt;enumeration value="Not Supplied"/&amp;gt;
 *     &amp;lt;enumeration value="Security Requirement"/&amp;gt;
 *     &amp;lt;enumeration value="System Conditions"/&amp;gt;
 *     &amp;lt;enumeration value="Weather"/&amp;gt;
 *     &amp;lt;enumeration value="Resource Problems"/&amp;gt;
 *   &amp;lt;/restriction&amp;gt;
 * &amp;lt;/simpleType&amp;gt;
 * &lt;/pre&gt;
 * 
 */
@XmlType(name = "EnumReasonVarPlanActualType")
@XmlEnum
public enum EnumReasonVarPlanActualType {

    @XmlEnumValue("Not Supplied")
    NOT_SUPPLIED("Not Supplied"),
    @XmlEnumValue("Security Requirement")
    SECURITY_REQUIREMENT("Security Requirement"),
    @XmlEnumValue("System Conditions")
    SYSTEM_CONDITIONS("System Conditions"),
    @XmlEnumValue("Weather")
    WEATHER("Weather"),
    @XmlEnumValue("Resource Problems")
    RESOURCE_PROBLEMS("Resource Problems");
    private final String value;

    EnumReasonVarPlanActualType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static EnumReasonVarPlanActualType fromValue(String v) {
        for (EnumReasonVarPlanActualType c: EnumReasonVarPlanActualType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
