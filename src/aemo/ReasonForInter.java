//
// This file was generated by the Eclipse Implementation of JAXB, v2.3.3 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.05.08 at 12:34:41 PM AEST 
//


package aemo;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * &lt;p&gt;Java class for ReasonForInter.
 * 
 * &lt;p&gt;The following schema fragment specifies the expected content contained within this class.
 * &lt;pre&gt;
 * &amp;lt;simpleType name="ReasonForInter"&amp;gt;
 *   &amp;lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&amp;gt;
 *     &amp;lt;maxLength value="50"/&amp;gt;
 *     &amp;lt;enumeration value="Meter Exchange - Individual"/&amp;gt;
 *     &amp;lt;enumeration value="Meter Exchange - Rollout"/&amp;gt;
 *     &amp;lt;enumeration value="Meter Replacement - Family Maintenance"/&amp;gt;
 *     &amp;lt;enumeration value="Meter Test"/&amp;gt;
 *     &amp;lt;enumeration value="Meter Fault Investigation"/&amp;gt;
 *     &amp;lt;enumeration value="Distribution Works"/&amp;gt;
 *     &amp;lt;enumeration value="Other"/&amp;gt;
 *   &amp;lt;/restriction&amp;gt;
 * &amp;lt;/simpleType&amp;gt;
 * &lt;/pre&gt;
 * 
 */
@XmlType(name = "ReasonForInter")
@XmlEnum
public enum ReasonForInter {

    @XmlEnumValue("Meter Exchange - Individual")
    METER_EXCHANGE_INDIVIDUAL("Meter Exchange - Individual"),
    @XmlEnumValue("Meter Exchange - Rollout")
    METER_EXCHANGE_ROLLOUT("Meter Exchange - Rollout"),
    @XmlEnumValue("Meter Replacement - Family Maintenance")
    METER_REPLACEMENT_FAMILY_MAINTENANCE("Meter Replacement - Family Maintenance"),
    @XmlEnumValue("Meter Test")
    METER_TEST("Meter Test"),
    @XmlEnumValue("Meter Fault Investigation")
    METER_FAULT_INVESTIGATION("Meter Fault Investigation"),
    @XmlEnumValue("Distribution Works")
    DISTRIBUTION_WORKS("Distribution Works"),
    @XmlEnumValue("Other")
    OTHER("Other");
    private final String value;

    ReasonForInter(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ReasonForInter fromValue(String v) {
        for (ReasonForInter c: ReasonForInter.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
